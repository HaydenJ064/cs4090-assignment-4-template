1. Unit Testing
  ==================================================== tests coverage ====================================================
  ___________________________________ coverage: platform linux, python 3.12.3-final-0 ____________________________________

  Name            Stmts   Miss  Cover
  -----------------------------------
  app.py             60     60     0%
  tasks.py           31      3    90%
  test_tasks.py      64      1    98%
  -----------------------------------
  TOTAL             155     64    59%

  Here is what comes when pytest -v --cov=. test_tasks.py, to show the total coverage over each section of code, where the test_tasks.py is the coverage for app.py as running tests while the streamlit app is running is much more complex
  The process was primarily just adding more tests to each file with asserts to make sure the output matched expectation
  The added button works similary to run the tests over main where it can be seen that 7/8 pass them
  The coverage was met by making sure to hit as many possible cases so that as many lines as possible would be ran
  In code documentation aims to have names for functions be as clear as possible to make changes easier as they are needed

2. Bug Reporting and fixing
  Bug #1
    Unique IDs are not generated in a thorough manner, instead just using their current index.
    Can be recreated by deleting and readding new tasks.
    It would be expected for each task to still be unique if others are removed
    High priority

  Bug #2
    Datetime handling was done purely as strings, causing issues over longer periods of time
    Seen while reading through code
    It would be expected for them to be stored as datetime objects
    Med priority

  Bug #3
    JSON decoding didnt offer any error messages
    Found when messing with json outside of the app
    Interacting with data should have more clear error messages
    Low priority

  Bug #4
    Input validation for the title of a task
    No validation on the input led to bugs
    Should make sure that all input given is safe
    Med priority

  Bug #5
    Get was inconsistently used
    Seen while reading through code
    Should be consisten to prevent errors
    Low priority

4. Test-Driven Development
  Feature #1: Task Editing
    Failure example: NameError: name 'edit_task' is not defined
      def edit_task(task_id, updated_task):
        """
        Edit an existing task.

        Args:
            task_id (int): ID of the task to edit.
            updated_task (dict): Dictionary containing the updated task information.
        """
        tasks = load_tasks()
        for i, task in enumerate(tasks):
            if task["id"] == task_id:
                tasks[i] = updated_task
                save_tasks(tasks)
                return
        raise ValueError(f"Task with id {task_id} not found.") #error handling
    Now runs correctly when called
    No refactoring needed for this feature

  Feature #2: Further developed sorting
    Failure example: NameError: name 'sort_tasks' is not defined
      def sort_tasks(tasks, sort_by="due_date"):
          """
          Sort tasks by a given criteria.
  
          Args:
              tasks (list): List of tasks to sort.
              sort_by (str): Criteria to sort by (e.g., "due_date", "priority", "category").

          Returns:
              list: Sorted list of tasks.
          """
          if not tasks:
              return []
          if sort_by == "due_date":
              return sorted(tasks, key=lambda x: datetime.strptime(x["due_date"], "%Y-%m-%d"))
          elif sort_by == "priority":
              priority_order = {"High": 1, "Medium": 2, "Low": 3}
              return sorted(tasks, key=lambda x: priority_order[x["priority"]])
          elif sort_by == "category":
              return sorted(tasks, key=lambda x: x["category"])
          else:
              raise ValueError(f"Invalid sort_by value: {sort_by}")
    Now runs correctly when called
    Refactoring to better handle errors and include more sorting options

  Feature #3: 
    Failure: Again a name error as it had not been defined yet
    def create_recurring_tasks(task, instances):
        """
        Creates recurring tasks based on the given task and number of instances.

        Args:
            task (dict): The base task.
            instances (int): The number of recurring task instances to create.

        Returns:
            list: A list of recurring task dictionaries.
        """
        recurring_tasks = []
        base_date = datetime.strptime(task["due_date"], "%Y-%m-%d")

        for i in range(instances):
            new_date = base_date + timedelta(days=i)
            new_task = task.copy()
            new_task["id"] = generate_unique_id([]) + i
            new_task["due_date"] = new_date.strftime("%Y-%m-%d")
            new_task["created_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            recurring_tasks.append(new_task)
        return recurring_tasks
    Now runs correctly when called
    Can be refactored into handling different repetitions, i.e. monthly and weekly, or custom scheduling all together
